import { Component, OnInit, OnDestroy } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { Subscription } from 'rxjs';

// Servi√ßos
import { VehicleService, Vehicle } from '../../services/vehicle';
import { AuthService } from '../../services/auth';

@Component({
  selector: 'app-vehicle-details',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './vehicle-details.html',
  styleUrls: ['./vehicle-details.css']
})
export class VehicleDetails implements OnInit, OnDestroy {
  vehicle: Vehicle | null = null;
  isLoading = true;
  error: string | null = null;
  
  // Subscriptions
  private routeSubscription: Subscription = new Subscription();
  
  // Estat√≠sticas calculadas
  vehicleAge: number = 0;
  nextMaintenanceKm: number = 0;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private vehicleService: VehicleService,
    private authService: AuthService
  ) {}

  ngOnInit(): void {
    this.loadVehicleDetails();
  }

  ngOnDestroy(): void {
    this.routeSubscription.unsubscribe();
  }

  // Carregar detalhes do ve√≠culo
  private loadVehicleDetails(): void {
    this.routeSubscription = this.route.params.subscribe(params => {
      const vehicleId = params['id'];
      if (vehicleId) {
        this.loadVehicle(vehicleId);
      } else {
        this.error = 'ID do ve√≠culo n√£o fornecido';
        this.isLoading = false;
      }
    });
  }

  // Carregar ve√≠culo espec√≠fico
  private loadVehicle(vehicleId: string): void {
    try {
      const vehicle = this.vehicleService.getVehicleById(vehicleId);
      
      if (!vehicle) {
        this.error = 'Ve√≠culo n√£o encontrado';
        this.isLoading = false;
        return;
      }

      // Verificar se o ve√≠culo pertence ao usu√°rio logado
      const currentUserId = this.authService.getUserId();
      if (vehicle.userId !== currentUserId) {
        this.error = 'Voc√™ n√£o tem permiss√£o para ver este ve√≠culo';
        this.isLoading = false;
        return;
      }

      this.vehicle = vehicle;
      this.calculateVehicleStats();
      this.isLoading = false;

    } catch (error) {
      console.error('Erro ao carregar ve√≠culo:', error);
      this.error = 'Erro ao carregar detalhes do ve√≠culo';
      this.isLoading = false;
    }
  }

  // Calcular estat√≠sticas do ve√≠culo
  private calculateVehicleStats(): void {
    if (!this.vehicle) return;

    // Calcular idade do ve√≠culo
    const currentYear = new Date().getFullYear();
    this.vehicleAge = currentYear - this.vehicle.year;

    // Calcular pr√≥xima manuten√ß√£o (a cada 10.000 km)
    this.nextMaintenanceKm = Math.ceil(this.vehicle.mileage / 10000) * 10000;
  }

  
  // Formatar quilometragem
  formatMileage(mileage: number): string {
    return new Intl.NumberFormat('pt-BR').format(mileage) + ' km';
  }

  // Formatar data
  formatDate(dateString: string): string {
    const date = new Date(dateString);
    return date.toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  // Obter nome completo do ve√≠culo
  getVehicleFullName(): string {
    if (!this.vehicle) return '';
    return `${this.vehicle.brand} ${this.vehicle.model} ${this.vehicle.year}`;
  }

  // Obter cor do badge de combust√≠vel
  getFuelBadgeClass(): string {
    if (!this.vehicle) return 'bg-secondary';
    
    const fuelClasses: { [key: string]: string } = {
      'gasoline': 'bg-primary',
      'ethanol': 'bg-success',
      'flex': 'bg-info',
      'diesel': 'bg-warning',
      'electric': 'bg-success',
      'hybrid': 'bg-secondary'
    };
    return fuelClasses[this.vehicle.fuel] || 'bg-secondary';
  }

  // Obter nome do combust√≠vel
  getFuelDisplayName(): string {
    if (!this.vehicle) return '';
    
    const fuelNames: { [key: string]: string } = {
      'gasoline': 'Gasolina',
      'ethanol': 'Etanol',
      'flex': 'Flex',
      'diesel': 'Diesel',
      'electric': 'El√©trico',
      'hybrid': 'H√≠brido'
    };
    return fuelNames[this.vehicle.fuel] || this.vehicle.fuel;
  }

  // Obter nome da transmiss√£o
  getTransmissionDisplayName(): string {
    if (!this.vehicle) return '';
    
    const transmissionNames: { [key: string]: string } = {
      'manual': 'Manual',
      'automatic': 'Autom√°tica',
      'cvt': 'CVT'
    };
    return transmissionNames[this.vehicle.transmission] || this.vehicle.transmission;
  }

  // Navegar para edi√ß√£o
  editVehicle(): void {
    if (this.vehicle) {
      this.router.navigate(['/vehicles', this.vehicle.id, 'edit']);
    }
  }

  // Remover ve√≠culo
  async removeVehicle(): Promise<void> {
    if (!this.vehicle) return;

    const confirmRemove = confirm(
      `Tem certeza que deseja remover o ${this.getVehicleFullName()}?\n\nEsta a√ß√£o n√£o pode ser desfeita.`
    );

    if (confirmRemove) {
      try {
        await this.vehicleService.removeVehicle(this.vehicle.id);
        console.log('Ve√≠culo removido com sucesso');
        
        // Mostrar mensagem de sucesso
        alert('Ve√≠culo removido com sucesso!');
        
        // Navegar de volta para dashboard
        this.router.navigate(['/dashboard']);
        
      } catch (error) {
        console.error('Erro ao remover ve√≠culo:', error);
        alert('Erro ao remover ve√≠culo. Tente novamente.');
      }
    }
  }

  // Duplicar ve√≠culo (criar c√≥pia)
  duplicateVehicle(): void {
    if (!this.vehicle) return;

    const confirmDuplicate = confirm(
      `Deseja criar uma c√≥pia do ${this.getVehicleFullName()}?`
    );

    if (confirmDuplicate) {
      // Navegar para add-vehicle com dados pr√©-preenchidos
      this.router.navigate(['/add-vehicle'], {
        queryParams: {
          duplicate: this.vehicle.id
        }
      });
    }
  }

  // Compartilhar ve√≠culo (simular)
  shareVehicle(): void {
    if (!this.vehicle) return;

    const shareText = `Confira meu ${this.getVehicleFullName()}!\n\n` +
                     `üìÖ Ano: ${this.vehicle.year}\n` +
                     `üé® Cor: ${this.vehicle.color}\n` +
                     `üöó Placa: ${this.vehicle.licensePlate}\n` +
                     `‚õΩ Combust√≠vel: ${this.getFuelDisplayName()}\n` +
                     `üìè Quilometragem: ${this.formatMileage(this.vehicle.mileage)}`;

    // Simular compartilhamento
    if (navigator.share) {
      navigator.share({
        title: `Meu ${this.getVehicleFullName()}`,
        text: shareText
      }).catch(console.error);
    } else {
      // Fallback: copiar para clipboard
      navigator.clipboard.writeText(shareText).then(() => {
        alert('Informa√ß√µes do ve√≠culo copiadas para a √°rea de transfer√™ncia!');
      }).catch(() => {
        alert('N√£o foi poss√≠vel copiar as informa√ß√µes.');
      });
    }
  }

  // Voltar para dashboard
  goBack(): void {
    this.router.navigate(['/dashboard']);
  }

  // Voltar para lista de ve√≠culos
  goToVehiclesList(): void {
    this.router.navigate(['/vehicles']);
  }

  // Adicionar manuten√ß√£o (placeholder)
  addMaintenance(): void {
    alert('Funcionalidade de manuten√ß√µes ser√° implementada em breve!');
    // this.router.navigate(['/vehicles', this.vehicle?.id, 'maintenance', 'add']);
  }

  // Ver hist√≥rico de manuten√ß√µes (placeholder)
  viewMaintenanceHistory(): void {
    alert('Hist√≥rico de manuten√ß√µes ser√° implementado em breve!');
    // this.router.navigate(['/vehicles', this.vehicle?.id, 'maintenance']);
  }

  // Adicionar gasto (placeholder)
  addExpense(): void {
    alert('Funcionalidade de gastos ser√° implementada em breve!');
    // this.router.navigate(['/vehicles', this.vehicle?.id, 'expenses', 'add']);
  }

  // Ver hist√≥rico de gastos (placeholder)
  viewExpenseHistory(): void {
    alert('Hist√≥rico de gastos ser√° implementado em breve!');
    // this.router.navigate(['/vehicles', this.vehicle?.id, 'expenses']);
  }
}